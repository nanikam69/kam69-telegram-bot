#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bot Telegram kam69 - Agent IA intelligent (version Webhook)
Cr√©√© pour fournir des r√©ponses intelligentes et utiles aux utilisateurs
"""

import logging
import os
import asyncio
from typing import Dict, Any
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from flask import Flask, request
import openai

# Configuration du logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configuration du bot
BOT_TOKEN = os.getenv("BOT_TOKEN")
BOT_NAME = "kam69"

# Configuration OpenAI (utilise les variables d'environnement d√©j√† configur√©es)
openai.api_key = os.getenv("OPENAI_API_KEY")
openai.api_base = os.getenv("OPENAI_API_BASE")

# Initialisation de l'application Flask
app = Flask(__name__)

class Kam69Bot:
    """Classe principale du bot Telegram kam69"""
    
    def __init__(self):
        self.application = None
        self.user_contexts: Dict[int, list] = {}
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Commande /start - Accueil du bot"""
        user = update.effective_user
        welcome_message = f"""
ü§ñ Salut {user.first_name} ! Je suis **kam69**, votre agent IA personnel !

Je peux vous aider avec :
‚Ä¢ üí¨ Conversations intelligentes
‚Ä¢ üìö R√©ponses √† vos questions
‚Ä¢ üîç Recherche d'informations
‚Ä¢ üí° Conseils et suggestions
‚Ä¢ üéØ R√©solution de probl√®mes

Tapez simplement votre message et je vous r√©pondrai !

Commandes disponibles :
/help - Afficher l'aide
/clear - Effacer l'historique de conversation
/info - Informations sur le bot
        """
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
        # Initialiser le contexte utilisateur
        user_id = update.effective_user.id
        if user_id not in self.user_contexts:
            self.user_contexts[user_id] = []
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Commande /help - Aide du bot"""
        help_text = """
üÜò **Aide - kam69 Bot**

**Commandes disponibles :**
/start - D√©marrer le bot
/help - Afficher cette aide
/clear - Effacer votre historique de conversation
/info - Informations sur le bot

**Comment utiliser le bot :**
1. Envoyez-moi simplement un message
2. Je vous r√©pondrai avec intelligence
3. Je garde en m√©moire notre conversation
4. Utilisez /clear pour recommencer √† z√©ro

**Exemples de questions :**
‚Ä¢ "Explique-moi la photosynth√®se"
‚Ä¢ "Comment cuisiner des p√¢tes parfaites ?"
‚Ä¢ "Aide-moi √† r√©soudre ce probl√®me de maths"
‚Ä¢ "Raconte-moi une blague"

Je suis l√† pour vous aider ! üöÄ
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Commande /info - Informations sur le bot"""
        info_text = """
‚ÑπÔ∏è **Informations - kam69 Bot**

**Nom :** kam69
**Type :** Agent IA intelligent
**Version :** 1.0.0
**Cr√©√© :** 2025

**Fonctionnalit√©s :**
‚Ä¢ Intelligence artificielle avanc√©e
‚Ä¢ M√©moire de conversation
‚Ä¢ R√©ponses contextuelles
‚Ä¢ Support multilingue
‚Ä¢ Disponible 24/7

**Technologie :**
‚Ä¢ Python + python-telegram-bot
‚Ä¢ OpenAI GPT
‚Ä¢ H√©bergement cloud

D√©velopp√© avec ‚ù§Ô∏è pour vous offrir la meilleure exp√©rience !
        """
        
        await update.message.reply_text(info_text, parse_mode='Markdown')
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Commande /clear - Effacer l'historique"""
        user_id = update.effective_user.id
        self.user_contexts[user_id] = []
        
        await update.message.reply_text(
            "üóëÔ∏è Historique de conversation effac√© ! Nous repartons √† z√©ro.",
            parse_mode='Markdown'
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Gestionnaire principal des messages"""
        try:
            user_id = update.effective_user.id
            user_message = update.message.text
            
            # Initialiser le contexte si n√©cessaire
            if user_id not in self.user_contexts:
                self.user_contexts[user_id] = []
            
            # Ajouter le message utilisateur au contexte
            self.user_contexts[user_id].append({
                "role": "user",
                "content": user_message
            })
            
            # Limiter l'historique √† 20 messages pour √©viter les tokens excessifs
            if len(self.user_contexts[user_id]) > 20:
                self.user_contexts[user_id] = self.user_contexts[user_id][-20:]
            
            # Envoyer un indicateur de frappe
            await context.bot.send_chat_action(
                chat_id=update.effective_chat.id,
                action="typing"
            )
            
            # G√©n√©rer la r√©ponse IA
            response = await self.generate_ai_response(user_id, user_message)
            
            # Ajouter la r√©ponse au contexte
            self.user_contexts[user_id].append({
                "role": "assistant",
                "content": response
            })
            
            # Envoyer la r√©ponse
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erreur lors du traitement du message: {e}")
            await update.message.reply_text(
                "‚ùå D√©sol√©, j'ai rencontr√© une erreur. Veuillez r√©essayer."
            )
    
    async def generate_ai_response(self, user_id: int, message: str) -> str:
        """G√©n√®re une r√©ponse IA bas√©e sur le contexte de l'utilisateur"""
        try:
            # Pr√©parer les messages pour l'API OpenAI
            messages = [
                {
                    "role": "system",
                    "content": """Tu es kam69, un agent IA intelligent et serviable int√©gr√© dans Telegram. \n                    \nTes caract√©ristiques :\n- Tu es amical, professionnel et utile\n- Tu r√©ponds en fran√ßais par d√©faut, sauf si on te demande une autre langue\n- Tu gardes le contexte de la conversation\n- Tu donnes des r√©ponses pr√©cises et d√©taill√©es\n- Tu peux aider sur tous les sujets : √©ducation, technologie, vie quotidienne, etc.\n- Tu utilises des emojis avec mod√©ration pour rendre tes r√©ponses plus engageantes\n- Tu es respectueux et bienveillant\n\nR√©ponds de mani√®re naturelle et conversationnelle."""
                }
            ]
            
            # Ajouter l'historique de conversation
            messages.extend(self.user_contexts[user_id])
            
            # Appel √† l'API OpenAI
            response = await asyncio.to_thread(
                openai.ChatCompletion.create,
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=1000,
                temperature=0.7
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration de la r√©ponse IA: {e}")
            return "ü§ñ Je rencontre des difficult√©s techniques. Pouvez-vous reformuler votre question ?"
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Gestionnaire d'erreurs global"""
        logger.error(f"Exception lors de la mise √† jour {update}: {context.error}")
    
    async def setup_bot_commands(self) -> None:
        """Configure les commandes du bot"""
        commands = [
            BotCommand("start", "D√©marrer le bot"),
            BotCommand("help", "Afficher l'aide"),
            BotCommand("clear", "Effacer l'historique"),
            BotCommand("info", "Informations sur le bot")
        ]
        
        await self.application.bot.set_my_commands(commands)
    
    def run_webhook(self, webhook_url: str) -> None:
        """Lance le bot en mode webhook"""
        # Cr√©er l'application
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # Ajouter les gestionnaires
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("info", self.info_command))
        self.application.add_handler(CommandHandler("clear", self.clear_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # Ajouter le gestionnaire d'erreurs
        self.application.add_error_handler(self.error_handler)
        
        # Configuration des commandes
        asyncio.create_task(self.setup_bot_commands())
        
        # D√©marrer le bot en mode webhook
        logger.info("üöÄ D√©marrage du bot kam69 en mode webhook...")
        print("ü§ñ Bot kam69 d√©marr√© avec succ√®s en mode webhook !")
        
        # Configuration du webhook
        self.application.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get("PORT", "8080")),
            url_path="/",
            webhook_url=webhook_url
        )

# Instance du bot
kam69_bot_instance = Kam69Bot()

@app.route("/", methods=["POST"])
async def webhook_handler():
    """G√®re les requ√™tes webhook entrantes"""
    update = Update.de_json(request.get_json(force=True), kam69_bot_instance.application.bot)
    await kam69_bot_instance.application.process_update(update)
    return "ok"

if __name__ == '__main__':
    # Cette partie sera ex√©cut√©e si le script est lanc√© directement (pour le d√©veloppement local)
    # Pour le d√©ploiement, le serveur web (Gunicorn, etc.) appellera l'application Flask
    logger.info("Lancement de l'application Flask...")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", "8080")))
